{"version":3,"file":"CrossSigning.js","names":["KEY_REQUEST_TIMEOUT_MS","publicKeyFromKeyInfo","keyInfo","Object","values","keys","CrossSigningInfo","constructor","userId","callbacks","cacheCallbacks","fromStorage","obj","res","prop","hasOwnProperty","toStorage","firstUse","crossSigningVerifiedBefore","getCrossSigningKey","type","expectedPubkey","shouldCache","indexOf","Error","undefined","getId","validateKey","key","signing","global","Olm","PkSigning","gotPubkey","init_with_seed","free","privkey","getCrossSigningKeyCache","cacheresult","result","storeCrossSigningKeyCache","isStoredInSecretStorage","secretStorage","stored","isStored","intersect","s","k","length","storeInSecretStorage","privateKey","encodedKey","encodeBase64","store","getFromSecretStorage","get","decodeBase64","isStoredInKeyCache","types","t","getCrossSigningKeysFromCache","Map","privKey","set","resetKeys","level","saveCrossSigningKeys","CrossSigningLevel","MASTER","master","USER_SIGNING","SELF_SIGNING","privateKeys","masterSigning","masterPub","generate_seed","user_id","usage","sskSigning","self_signing","sskPub","pkSign","uskSigning","user_signing","uskPub","assign","clearKeys","setKeys","signingKeys","error","logger","masterKey","pkVerify","e","updateCrossSigningVerifiedBefore","isCrossSigningVerified","signObject","data","pubkey","signUser","info","signDevice","device","algorithms","device_id","deviceId","checkUserTrust","userCrossSigning","UserTrustLevel","userTrusted","userMaster","uskId","checkDeviceTrust","localTrust","trustCrossSignedDevices","userTrust","userSSK","DeviceTrustLevel","deviceObj","deviceToObject","fromUserTrustLevel","getCacheCallbacks","signatures","crossSigningVerified","tofu","isVerified","wasCrossSigningVerified","isTofu","localVerified","userTrustLevel","Boolean","isLocallyVerified","createCryptoStoreCacheCallbacks","olmDevice","_expectedPublicKey","Promise","resolve","doTxn","IndexedDBCryptoStore","STORE_ACCOUNT","txn","getSecretStorePrivateKey","ciphertext","pickleKey","Buffer","from","decrypted","decryptAES","Uint8Array","encryptedKey","encryptAES","storeSecretStorePrivateKey","requestKeysDuringVerification","baseApis","getUserId","log","reject","client","original","crypto","crossSigningInfo","crossSigning","debug","promise","requestSecret","decoded","timeout","setTimeout","backupKeyPromise","cachedKey","getSessionBackupPrivateKey","secretReq","base64Key","decodedKey","storeSessionBackupPrivateKey","backupInfo","getKeyBackupVersion","restoreKeyBackupWithCache","then","race","all","catch","warn"],"sources":["../../src/crypto/CrossSigning.ts"],"sourcesContent":["/*\nCopyright 2019 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Cross signing methods\n * @module crypto/CrossSigning\n */\n\nimport { PkSigning } from \"@matrix-org/olm\";\n\nimport { decodeBase64, encodeBase64, pkSign, pkVerify } from './olmlib';\nimport { logger } from '../logger';\nimport { IndexedDBCryptoStore } from '../crypto/store/indexeddb-crypto-store';\nimport { decryptAES, encryptAES } from './aes';\nimport { DeviceInfo } from \"./deviceinfo\";\nimport { SecretStorage } from \"./SecretStorage\";\nimport { ICrossSigningKey, ISignedKey, MatrixClient } from \"../client\";\nimport { OlmDevice } from \"./OlmDevice\";\nimport { ICryptoCallbacks } from \"../matrix\";\nimport { ISignatures } from \"../@types/signed\";\nimport { CryptoStore } from \"./store/base\";\nimport { ISecretStorageKeyInfo } from \"./api\";\n\nconst KEY_REQUEST_TIMEOUT_MS = 1000 * 60;\n\nfunction publicKeyFromKeyInfo(keyInfo: ICrossSigningKey): string {\n    // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n    // We assume only a single key, and we want the bare form without type\n    // prefix, so we select the values.\n    return Object.values(keyInfo.keys)[0];\n}\n\nexport interface ICacheCallbacks {\n    getCrossSigningKeyCache?(type: string, expectedPublicKey?: string): Promise<Uint8Array>;\n    storeCrossSigningKeyCache?(type: string, key: Uint8Array): Promise<void>;\n}\n\nexport interface ICrossSigningInfo {\n    keys: Record<string, ICrossSigningKey>;\n    firstUse: boolean;\n    crossSigningVerifiedBefore: boolean;\n}\n\nexport class CrossSigningInfo {\n    public keys: Record<string, ICrossSigningKey> = {};\n    public firstUse = true;\n    // This tracks whether we've ever verified this user with any identity.\n    // When you verify a user, any devices online at the time that receive\n    // the verifying signature via the homeserver will latch this to true\n    // and can use it in the future to detect cases where the user has\n    // become unverified later for any reason.\n    private crossSigningVerifiedBefore = false;\n\n    /**\n     * Information about a user's cross-signing keys\n     *\n     * @class\n     *\n     * @param {string} userId the user that the information is about\n     * @param {object} callbacks Callbacks used to interact with the app\n     *     Requires getCrossSigningKey and saveCrossSigningKeys\n     * @param {object} cacheCallbacks Callbacks used to interact with the cache\n     */\n    constructor(\n        public readonly userId: string,\n        private callbacks: ICryptoCallbacks = {},\n        private cacheCallbacks: ICacheCallbacks = {},\n    ) {}\n\n    public static fromStorage(obj: ICrossSigningInfo, userId: string): CrossSigningInfo {\n        const res = new CrossSigningInfo(userId);\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                res[prop] = obj[prop];\n            }\n        }\n        return res;\n    }\n\n    public toStorage(): ICrossSigningInfo {\n        return {\n            keys: this.keys,\n            firstUse: this.firstUse,\n            crossSigningVerifiedBefore: this.crossSigningVerifiedBefore,\n        };\n    }\n\n    /**\n     * Calls the app callback to ask for a private key\n     *\n     * @param {string} type The key type (\"master\", \"self_signing\", or \"user_signing\")\n     * @param {string} expectedPubkey The matching public key or undefined to use\n     *     the stored public key for the given key type.\n     * @returns {Array} An array with [ public key, Olm.PkSigning ]\n     */\n    public async getCrossSigningKey(type: string, expectedPubkey?: string): Promise<[string, PkSigning]> {\n        const shouldCache = [\"master\", \"self_signing\", \"user_signing\"].indexOf(type) >= 0;\n\n        if (!this.callbacks.getCrossSigningKey) {\n            throw new Error(\"No getCrossSigningKey callback supplied\");\n        }\n\n        if (expectedPubkey === undefined) {\n            expectedPubkey = this.getId(type);\n        }\n\n        function validateKey(key: Uint8Array): [string, PkSigning] {\n            if (!key) return;\n            const signing = new global.Olm.PkSigning();\n            const gotPubkey = signing.init_with_seed(key);\n            if (gotPubkey === expectedPubkey) {\n                return [gotPubkey, signing];\n            }\n            signing.free();\n        }\n\n        let privkey;\n        if (this.cacheCallbacks.getCrossSigningKeyCache && shouldCache) {\n            privkey = await this.cacheCallbacks.getCrossSigningKeyCache(type, expectedPubkey);\n        }\n\n        const cacheresult = validateKey(privkey);\n        if (cacheresult) {\n            return cacheresult;\n        }\n\n        privkey = await this.callbacks.getCrossSigningKey(type, expectedPubkey);\n        const result = validateKey(privkey);\n        if (result) {\n            if (this.cacheCallbacks.storeCrossSigningKeyCache && shouldCache) {\n                await this.cacheCallbacks.storeCrossSigningKeyCache(type, privkey);\n            }\n            return result;\n        }\n\n        /* No keysource even returned a key */\n        if (!privkey) {\n            throw new Error(\n                \"getCrossSigningKey callback for \" + type + \" returned falsey\",\n            );\n        }\n\n        /* We got some keys from the keysource, but none of them were valid */\n        throw new Error(\n            \"Key type \" + type + \" from getCrossSigningKey callback did not match\",\n        );\n    }\n\n    /**\n     * Check whether the private keys exist in secret storage.\n     * XXX: This could be static, be we often seem to have an instance when we\n     * want to know this anyway...\n     *\n     * @param {SecretStorage} secretStorage The secret store using account data\n     * @returns {object} map of key name to key info the secret is encrypted\n     *     with, or null if it is not present or not encrypted with a trusted\n     *     key\n     */\n    public async isStoredInSecretStorage(secretStorage: SecretStorage): Promise<Record<string, object>> {\n        // check what SSSS keys have encrypted the master key (if any)\n        const stored = await secretStorage.isStored(\"m.cross_signing.master\") || {};\n        // then check which of those SSSS keys have also encrypted the SSK and USK\n        function intersect(s: Record<string, ISecretStorageKeyInfo>) {\n            for (const k of Object.keys(stored)) {\n                if (!s[k]) {\n                    delete stored[k];\n                }\n            }\n        }\n        for (const type of [\"self_signing\", \"user_signing\"]) {\n            intersect(await secretStorage.isStored(`m.cross_signing.${type}`) || {});\n        }\n        return Object.keys(stored).length ? stored : null;\n    }\n\n    /**\n     * Store private keys in secret storage for use by other devices. This is\n     * typically called in conjunction with the creation of new cross-signing\n     * keys.\n     *\n     * @param {Map} keys The keys to store\n     * @param {SecretStorage} secretStorage The secret store using account data\n     */\n    public static async storeInSecretStorage(\n        keys: Map<string, Uint8Array>,\n        secretStorage: SecretStorage,\n    ): Promise<void> {\n        for (const [type, privateKey] of keys) {\n            const encodedKey = encodeBase64(privateKey);\n            await secretStorage.store(`m.cross_signing.${type}`, encodedKey);\n        }\n    }\n\n    /**\n     * Get private keys from secret storage created by some other device. This\n     * also passes the private keys to the app-specific callback.\n     *\n     * @param {string} type The type of key to get.  One of \"master\",\n     * \"self_signing\", or \"user_signing\".\n     * @param {SecretStorage} secretStorage The secret store using account data\n     * @return {Uint8Array} The private key\n     */\n    public static async getFromSecretStorage(type: string, secretStorage: SecretStorage): Promise<Uint8Array> {\n        const encodedKey = await secretStorage.get(`m.cross_signing.${type}`);\n        if (!encodedKey) {\n            return null;\n        }\n        return decodeBase64(encodedKey);\n    }\n\n    /**\n     * Check whether the private keys exist in the local key cache.\n     *\n     * @param {string} [type] The type of key to get. One of \"master\",\n     * \"self_signing\", or \"user_signing\". Optional, will check all by default.\n     * @returns {boolean} True if all keys are stored in the local cache.\n     */\n    public async isStoredInKeyCache(type?: string): Promise<boolean> {\n        const cacheCallbacks = this.cacheCallbacks;\n        if (!cacheCallbacks) return false;\n        const types = type ? [type] : [\"master\", \"self_signing\", \"user_signing\"];\n        for (const t of types) {\n            if (!await cacheCallbacks.getCrossSigningKeyCache(t)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Get cross-signing private keys from the local cache.\n     *\n     * @returns {Map} A map from key type (string) to private key (Uint8Array)\n     */\n    public async getCrossSigningKeysFromCache(): Promise<Map<string, Uint8Array>> {\n        const keys = new Map();\n        const cacheCallbacks = this.cacheCallbacks;\n        if (!cacheCallbacks) return keys;\n        for (const type of [\"master\", \"self_signing\", \"user_signing\"]) {\n            const privKey = await cacheCallbacks.getCrossSigningKeyCache(type);\n            if (!privKey) {\n                continue;\n            }\n            keys.set(type, privKey);\n        }\n        return keys;\n    }\n\n    /**\n     * Get the ID used to identify the user. This can also be used to test for\n     * the existence of a given key type.\n     *\n     * @param {string} type The type of key to get the ID of.  One of \"master\",\n     * \"self_signing\", or \"user_signing\".  Defaults to \"master\".\n     *\n     * @return {string} the ID\n     */\n    public getId(type = \"master\"): string {\n        if (!this.keys[type]) return null;\n        const keyInfo = this.keys[type];\n        return publicKeyFromKeyInfo(keyInfo);\n    }\n\n    /**\n     * Create new cross-signing keys for the given key types. The public keys\n     * will be held in this class, while the private keys are passed off to the\n     * `saveCrossSigningKeys` application callback.\n     *\n     * @param {CrossSigningLevel} level The key types to reset\n     */\n    public async resetKeys(level?: CrossSigningLevel): Promise<void> {\n        if (!this.callbacks.saveCrossSigningKeys) {\n            throw new Error(\"No saveCrossSigningKeys callback supplied\");\n        }\n\n        // If we're resetting the master key, we reset all keys\n        if (\n            level === undefined ||\n            level & CrossSigningLevel.MASTER ||\n            !this.keys.master\n        ) {\n            level = (\n                CrossSigningLevel.MASTER |\n                CrossSigningLevel.USER_SIGNING |\n                CrossSigningLevel.SELF_SIGNING\n            );\n        } else if (level === 0 as CrossSigningLevel) {\n            return;\n        }\n\n        const privateKeys: Record<string, Uint8Array> = {};\n        const keys: Record<string, ICrossSigningKey> = {};\n        let masterSigning;\n        let masterPub;\n\n        try {\n            if (level & CrossSigningLevel.MASTER) {\n                masterSigning = new global.Olm.PkSigning();\n                privateKeys.master = masterSigning.generate_seed();\n                masterPub = masterSigning.init_with_seed(privateKeys.master);\n                keys.master = {\n                    user_id: this.userId,\n                    usage: ['master'],\n                    keys: {\n                        ['ed25519:' + masterPub]: masterPub,\n                    },\n                };\n            } else {\n                [masterPub, masterSigning] = await this.getCrossSigningKey(\"master\");\n            }\n\n            if (level & CrossSigningLevel.SELF_SIGNING) {\n                const sskSigning = new global.Olm.PkSigning();\n                try {\n                    privateKeys.self_signing = sskSigning.generate_seed();\n                    const sskPub = sskSigning.init_with_seed(privateKeys.self_signing);\n                    keys.self_signing = {\n                        user_id: this.userId,\n                        usage: ['self_signing'],\n                        keys: {\n                            ['ed25519:' + sskPub]: sskPub,\n                        },\n                    };\n                    pkSign(keys.self_signing, masterSigning, this.userId, masterPub);\n                } finally {\n                    sskSigning.free();\n                }\n            }\n\n            if (level & CrossSigningLevel.USER_SIGNING) {\n                const uskSigning = new global.Olm.PkSigning();\n                try {\n                    privateKeys.user_signing = uskSigning.generate_seed();\n                    const uskPub = uskSigning.init_with_seed(privateKeys.user_signing);\n                    keys.user_signing = {\n                        user_id: this.userId,\n                        usage: ['user_signing'],\n                        keys: {\n                            ['ed25519:' + uskPub]: uskPub,\n                        },\n                    };\n                    pkSign(keys.user_signing, masterSigning, this.userId, masterPub);\n                } finally {\n                    uskSigning.free();\n                }\n            }\n\n            Object.assign(this.keys, keys);\n            this.callbacks.saveCrossSigningKeys(privateKeys);\n        } finally {\n            if (masterSigning) {\n                masterSigning.free();\n            }\n        }\n    }\n\n    /**\n     * unsets the keys, used when another session has reset the keys, to disable cross-signing\n     */\n    public clearKeys(): void {\n        this.keys = {};\n    }\n\n    public setKeys(keys: Record<string, ICrossSigningKey>): void {\n        const signingKeys: Record<string, ICrossSigningKey> = {};\n        if (keys.master) {\n            if (keys.master.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in master key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            if (!this.keys.master) {\n                // this is the first key we've seen, so first-use is true\n                this.firstUse = true;\n            } else if (publicKeyFromKeyInfo(keys.master) !== this.getId()) {\n                // this is a different key, so first-use is false\n                this.firstUse = false;\n            } // otherwise, same key, so no change\n            signingKeys.master = keys.master;\n        } else if (this.keys.master) {\n            signingKeys.master = this.keys.master;\n        } else {\n            throw new Error(\"Tried to set cross-signing keys without a master key\");\n        }\n        const masterKey = publicKeyFromKeyInfo(signingKeys.master);\n\n        // verify signatures\n        if (keys.user_signing) {\n            if (keys.user_signing.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in user_signing key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            try {\n                pkVerify(keys.user_signing, masterKey, this.userId);\n            } catch (e) {\n                logger.error(\"invalid signature on user-signing key\");\n                // FIXME: what do we want to do here?\n                throw e;\n            }\n        }\n        if (keys.self_signing) {\n            if (keys.self_signing.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in self_signing key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            try {\n                pkVerify(keys.self_signing, masterKey, this.userId);\n            } catch (e) {\n                logger.error(\"invalid signature on self-signing key\");\n                // FIXME: what do we want to do here?\n                throw e;\n            }\n        }\n\n        // if everything checks out, then save the keys\n        if (keys.master) {\n            this.keys.master = keys.master;\n            // if the master key is set, then the old self-signing and\n            // user-signing keys are obsolete\n            this.keys.self_signing = null;\n            this.keys.user_signing = null;\n        }\n        if (keys.self_signing) {\n            this.keys.self_signing = keys.self_signing;\n        }\n        if (keys.user_signing) {\n            this.keys.user_signing = keys.user_signing;\n        }\n    }\n\n    public updateCrossSigningVerifiedBefore(isCrossSigningVerified: boolean): void {\n        // It is critical that this value latches forward from false to true but\n        // never back to false to avoid a downgrade attack.\n        if (!this.crossSigningVerifiedBefore && isCrossSigningVerified) {\n            this.crossSigningVerifiedBefore = true;\n        }\n    }\n\n    public async signObject<T extends object>(data: T, type: string): Promise<T & { signatures: ISignatures }> {\n        if (!this.keys[type]) {\n            throw new Error(\n                \"Attempted to sign with \" + type + \" key but no such key present\",\n            );\n        }\n        const [pubkey, signing] = await this.getCrossSigningKey(type);\n        try {\n            pkSign(data, signing, this.userId, pubkey);\n            return data as T & { signatures: ISignatures };\n        } finally {\n            signing.free();\n        }\n    }\n\n    public async signUser(key: CrossSigningInfo): Promise<ICrossSigningKey> {\n        if (!this.keys.user_signing) {\n            logger.info(\"No user signing key: not signing user\");\n            return;\n        }\n        return this.signObject(key.keys.master, \"user_signing\");\n    }\n\n    public async signDevice(userId: string, device: DeviceInfo): Promise<ISignedKey> {\n        if (userId !== this.userId) {\n            throw new Error(\n                `Trying to sign ${userId}'s device; can only sign our own device`,\n            );\n        }\n        if (!this.keys.self_signing) {\n            logger.info(\"No self signing key: not signing device\");\n            return;\n        }\n        return this.signObject<Omit<ISignedKey, \"signatures\">>(\n            {\n                algorithms: device.algorithms,\n                keys: device.keys,\n                device_id: device.deviceId,\n                user_id: userId,\n            }, \"self_signing\",\n        );\n    }\n\n    /**\n     * Check whether a given user is trusted.\n     *\n     * @param {CrossSigningInfo} userCrossSigning Cross signing info for user\n     *\n     * @returns {UserTrustLevel}\n     */\n    public checkUserTrust(userCrossSigning: CrossSigningInfo): UserTrustLevel {\n        // if we're checking our own key, then it's trusted if the master key\n        // and self-signing key match\n        if (this.userId === userCrossSigning.userId\n            && this.getId() && this.getId() === userCrossSigning.getId()\n            && this.getId(\"self_signing\")\n            && this.getId(\"self_signing\") === userCrossSigning.getId(\"self_signing\")\n        ) {\n            return new UserTrustLevel(true, true, this.firstUse);\n        }\n\n        if (!this.keys.user_signing) {\n            // If there's no user signing key, they can't possibly be verified.\n            // They may be TOFU trusted though.\n            return new UserTrustLevel(false, false, userCrossSigning.firstUse);\n        }\n\n        let userTrusted;\n        const userMaster = userCrossSigning.keys.master;\n        const uskId = this.getId('user_signing');\n        try {\n            pkVerify(userMaster, uskId, this.userId);\n            userTrusted = true;\n        } catch (e) {\n            userTrusted = false;\n        }\n        return new UserTrustLevel(\n            userTrusted,\n            userCrossSigning.crossSigningVerifiedBefore,\n            userCrossSigning.firstUse,\n        );\n    }\n\n    /**\n     * Check whether a given device is trusted.\n     *\n     * @param {CrossSigningInfo} userCrossSigning Cross signing info for user\n     * @param {module:crypto/deviceinfo} device The device to check\n     * @param {boolean} localTrust Whether the device is trusted locally\n     * @param {boolean} trustCrossSignedDevices Whether we trust cross signed devices\n     *\n     * @returns {DeviceTrustLevel}\n     */\n    public checkDeviceTrust(\n        userCrossSigning: CrossSigningInfo,\n        device: DeviceInfo,\n        localTrust: boolean,\n        trustCrossSignedDevices: boolean,\n    ): DeviceTrustLevel {\n        const userTrust = this.checkUserTrust(userCrossSigning);\n\n        const userSSK = userCrossSigning.keys.self_signing;\n        if (!userSSK) {\n            // if the user has no self-signing key then we cannot make any\n            // trust assertions about this device from cross-signing\n            return new DeviceTrustLevel(\n                false, false, localTrust, trustCrossSignedDevices,\n            );\n        }\n\n        const deviceObj = deviceToObject(device, userCrossSigning.userId);\n        try {\n            // if we can verify the user's SSK from their master key...\n            pkVerify(userSSK, userCrossSigning.getId(), userCrossSigning.userId);\n            // ...and this device's key from their SSK...\n            pkVerify(deviceObj, publicKeyFromKeyInfo(userSSK), userCrossSigning.userId);\n            // ...then we trust this device as much as far as we trust the user\n            return DeviceTrustLevel.fromUserTrustLevel(userTrust, localTrust, trustCrossSignedDevices);\n        } catch (e) {\n            return new DeviceTrustLevel(false, false, localTrust, trustCrossSignedDevices);\n        }\n    }\n\n    /**\n     * @returns {object} Cache callbacks\n     */\n    public getCacheCallbacks(): ICacheCallbacks {\n        return this.cacheCallbacks;\n    }\n}\n\nfunction deviceToObject(device: DeviceInfo, userId: string) {\n    return {\n        algorithms: device.algorithms,\n        keys: device.keys,\n        device_id: device.deviceId,\n        user_id: userId,\n        signatures: device.signatures,\n    };\n}\n\nexport enum CrossSigningLevel {\n    MASTER = 4,\n    USER_SIGNING = 2,\n    SELF_SIGNING = 1,\n}\n\n/**\n * Represents the ways in which we trust a user\n */\nexport class UserTrustLevel {\n    constructor(\n        private readonly crossSigningVerified: boolean,\n        private readonly crossSigningVerifiedBefore: boolean,\n        private readonly tofu: boolean,\n    ) {}\n\n    /**\n     * @returns {boolean} true if this user is verified via any means\n     */\n    public isVerified(): boolean {\n        return this.isCrossSigningVerified();\n    }\n\n    /**\n     * @returns {boolean} true if this user is verified via cross signing\n     */\n    public isCrossSigningVerified(): boolean {\n        return this.crossSigningVerified;\n    }\n\n    /**\n     * @returns {boolean} true if we ever verified this user before (at least for\n     * the history of verifications observed by this device).\n     */\n    public wasCrossSigningVerified(): boolean {\n        return this.crossSigningVerifiedBefore;\n    }\n\n    /**\n     * @returns {boolean} true if this user's key is trusted on first use\n     */\n    public isTofu(): boolean {\n        return this.tofu;\n    }\n}\n\n/**\n * Represents the ways in which we trust a device\n */\nexport class DeviceTrustLevel {\n    constructor(\n        public readonly crossSigningVerified: boolean,\n        public readonly tofu: boolean,\n        private readonly localVerified: boolean,\n        private readonly trustCrossSignedDevices: boolean,\n    ) {}\n\n    public static fromUserTrustLevel(\n        userTrustLevel: UserTrustLevel,\n        localVerified: boolean,\n        trustCrossSignedDevices: boolean,\n    ): DeviceTrustLevel {\n        return new DeviceTrustLevel(\n            userTrustLevel.isCrossSigningVerified(),\n            userTrustLevel.isTofu(),\n            localVerified,\n            trustCrossSignedDevices,\n        );\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified via any means\n     */\n    public isVerified(): boolean {\n        return Boolean(this.isLocallyVerified() || (\n            this.trustCrossSignedDevices && this.isCrossSigningVerified()\n        ));\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified via cross signing\n     */\n    public isCrossSigningVerified(): boolean {\n        return this.crossSigningVerified;\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified locally\n     */\n    public isLocallyVerified(): boolean {\n        return this.localVerified;\n    }\n\n    /**\n     * @returns {boolean} true if this device is trusted from a user's key\n     * that is trusted on first use\n     */\n    public isTofu(): boolean {\n        return this.tofu;\n    }\n}\n\nexport function createCryptoStoreCacheCallbacks(store: CryptoStore, olmDevice: OlmDevice): ICacheCallbacks {\n    return {\n        getCrossSigningKeyCache: async function(type: string, _expectedPublicKey: string): Promise<Uint8Array> {\n            const key = await new Promise<any>((resolve) => {\n                return store.doTxn(\n                    'readonly',\n                    [IndexedDBCryptoStore.STORE_ACCOUNT],\n                    (txn) => {\n                        store.getSecretStorePrivateKey(txn, resolve, type);\n                    },\n                );\n            });\n\n            if (key && key.ciphertext) {\n                const pickleKey = Buffer.from(olmDevice.pickleKey);\n                const decrypted = await decryptAES(key, pickleKey, type);\n                return decodeBase64(decrypted);\n            } else {\n                return key;\n            }\n        },\n        storeCrossSigningKeyCache: async function(type: string, key: Uint8Array): Promise<void> {\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(\n                    `storeCrossSigningKeyCache expects Uint8Array, got ${key}`,\n                );\n            }\n            const pickleKey = Buffer.from(olmDevice.pickleKey);\n            const encryptedKey = await encryptAES(encodeBase64(key), pickleKey, type);\n            return store.doTxn(\n                'readwrite',\n                [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    store.storeSecretStorePrivateKey(txn, type, encryptedKey);\n                },\n            );\n        },\n    };\n}\n\nexport type KeysDuringVerification = [[string, PkSigning], [string, PkSigning], [string, PkSigning], void];\n\n/**\n * Request cross-signing keys from another device during verification.\n *\n * @param {MatrixClient} baseApis base Matrix API interface\n * @param {string} userId The user ID being verified\n * @param {string} deviceId The device ID being verified\n */\nexport function requestKeysDuringVerification(\n    baseApis: MatrixClient,\n    userId: string,\n    deviceId: string,\n): Promise<KeysDuringVerification | void> {\n    // If this is a self-verification, ask the other party for keys\n    if (baseApis.getUserId() !== userId) {\n        return;\n    }\n    logger.log(\"Cross-signing: Self-verification done; requesting keys\");\n    // This happens asynchronously, and we're not concerned about waiting for\n    // it. We return here in order to test.\n    return new Promise<KeysDuringVerification | void>((resolve, reject) => {\n        const client = baseApis;\n        const original = client.crypto.crossSigningInfo;\n\n        // We already have all of the infrastructure we need to validate and\n        // cache cross-signing keys, so instead of replicating that, here we set\n        // up callbacks that request them from the other device and call\n        // CrossSigningInfo.getCrossSigningKey() to validate/cache\n        const crossSigning = new CrossSigningInfo(\n            original.userId,\n            { getCrossSigningKey: async (type) => {\n                logger.debug(\"Cross-signing: requesting secret\", type, deviceId);\n                const { promise } = client.requestSecret(\n                    `m.cross_signing.${type}`, [deviceId],\n                );\n                const result = await promise;\n                const decoded = decodeBase64(result);\n                return Uint8Array.from(decoded);\n            } },\n            original.getCacheCallbacks(),\n        );\n        crossSigning.keys = original.keys;\n\n        // XXX: get all keys out if we get one key out\n        // https://github.com/vector-im/element-web/issues/12604\n        // then change here to reject on the timeout\n        // Requests can be ignored, so don't wait around forever\n        const timeout = new Promise<void>((resolve) => {\n            setTimeout(\n                resolve,\n                KEY_REQUEST_TIMEOUT_MS,\n                new Error(\"Timeout\"),\n            );\n        });\n\n        // also request and cache the key backup key\n        const backupKeyPromise = (async () => {\n            const cachedKey = await client.crypto.getSessionBackupPrivateKey();\n            if (!cachedKey) {\n                logger.info(\"No cached backup key found. Requesting...\");\n                const secretReq = client.requestSecret(\n                    'm.megolm_backup.v1', [deviceId],\n                );\n                const base64Key = await secretReq.promise;\n                logger.info(\"Got key backup key, decoding...\");\n                const decodedKey = decodeBase64(base64Key);\n                logger.info(\"Decoded backup key, storing...\");\n                await client.crypto.storeSessionBackupPrivateKey(\n                    Uint8Array.from(decodedKey),\n                );\n                logger.info(\"Backup key stored. Starting backup restore...\");\n                const backupInfo = await client.getKeyBackupVersion();\n                // no need to await for this - just let it go in the bg\n                client.restoreKeyBackupWithCache(undefined, undefined, backupInfo).then(() => {\n                    logger.info(\"Backup restored.\");\n                });\n            }\n        })();\n\n        // We call getCrossSigningKey() for its side-effects\n        return Promise.race<KeysDuringVerification | void>([\n            Promise.all([\n                crossSigning.getCrossSigningKey(\"master\"),\n                crossSigning.getCrossSigningKey(\"self_signing\"),\n                crossSigning.getCrossSigningKey(\"user_signing\"),\n                backupKeyPromise,\n            ]) as Promise<KeysDuringVerification>,\n            timeout,\n        ]).then(resolve, reject);\n    }).catch((e) => {\n        logger.warn(\"Cross-signing: failure while requesting keys:\", e);\n    });\n}\n"],"mappings":"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"}