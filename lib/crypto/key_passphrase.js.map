{"version":3,"file":"key_passphrase.js","names":["subtleCrypto","window","crypto","subtle","webkitSubtle","DEFAULT_ITERATIONS","DEFAULT_BITSIZE","keyFromAuthData","authData","password","global","Olm","Error","private_key_salt","private_key_iterations","deriveKey","private_key_bits","keyFromPassphrase","salt","randomString","key","iterations","numBits","deriveKeyBrowser","deriveKeyNode","TextEncoder","importKey","encode","name","keybits","deriveBits","hash","Uint8Array","getCrypto","pbkdf2Sync","Buffer","from"],"sources":["../../src/crypto/key_passphrase.ts"],"sourcesContent":["/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { randomString } from '../randomstring';\nimport { getCrypto } from '../utils';\n\nconst subtleCrypto = (typeof window !== \"undefined\" && window.crypto) ?\n    (window.crypto.subtle || window.crypto.webkitSubtle) : null;\n\nconst DEFAULT_ITERATIONS = 500000;\n\nconst DEFAULT_BITSIZE = 256;\n\n/* eslint-disable camelcase */\ninterface IAuthData {\n    private_key_salt?: string;\n    private_key_iterations?: number;\n    private_key_bits?: number;\n}\n/* eslint-enable camelcase */\n\ninterface IKey {\n    key: Uint8Array;\n    salt: string;\n    iterations: number;\n}\n\nexport function keyFromAuthData(authData: IAuthData, password: string): Promise<Uint8Array> {\n    if (!global.Olm) {\n        throw new Error(\"Olm is not available\");\n    }\n\n    if (!authData.private_key_salt || !authData.private_key_iterations) {\n        throw new Error(\n            \"Salt and/or iterations not found: \" +\n            \"this backup cannot be restored with a passphrase\",\n        );\n    }\n\n    return deriveKey(\n        password, authData.private_key_salt,\n        authData.private_key_iterations,\n        authData.private_key_bits || DEFAULT_BITSIZE,\n    );\n}\n\nexport async function keyFromPassphrase(password: string): Promise<IKey> {\n    if (!global.Olm) {\n        throw new Error(\"Olm is not available\");\n    }\n\n    const salt = randomString(32);\n\n    const key = await deriveKey(password, salt, DEFAULT_ITERATIONS, DEFAULT_BITSIZE);\n\n    return { key, salt, iterations: DEFAULT_ITERATIONS };\n}\n\nexport async function deriveKey(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits = DEFAULT_BITSIZE,\n): Promise<Uint8Array> {\n    return subtleCrypto\n        ? deriveKeyBrowser(password, salt, iterations, numBits)\n        : deriveKeyNode(password, salt, iterations, numBits);\n}\n\nasync function deriveKeyBrowser(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits: number,\n): Promise<Uint8Array> {\n    const subtleCrypto = global.crypto.subtle;\n    const TextEncoder = global.TextEncoder;\n    if (!subtleCrypto || !TextEncoder) {\n        throw new Error(\"Password-based backup is not avaiable on this platform\");\n    }\n\n    const key = await subtleCrypto.importKey(\n        'raw',\n        new TextEncoder().encode(password),\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits'],\n    );\n\n    const keybits = await subtleCrypto.deriveBits(\n        {\n            name: 'PBKDF2',\n            salt: new TextEncoder().encode(salt),\n            iterations: iterations,\n            hash: 'SHA-512',\n        },\n        key,\n        numBits,\n    );\n\n    return new Uint8Array(keybits);\n}\n\nasync function deriveKeyNode(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits: number,\n): Promise<Uint8Array> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    return crypto.pbkdf2Sync(password, Buffer.from(salt, 'binary'), iterations, numBits, 'sha512');\n}\n"],"mappings":"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"}