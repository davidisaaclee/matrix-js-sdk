{"version":3,"file":"rust-crypto.js","names":["RustCrypto","constructor","olmMachine","_userId","_deviceId","stop","stopped","close","decryptEvent","event","decryptRoomEvent","RustSdkCryptoJs","RoomId","Error","userHasCrossSigningKeys","exportRoomKeys"],"sources":["../../src/rust-crypto/rust-crypto.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-js\";\n\nimport type { IEventDecryptionResult, IMegolmSessionData } from \"../@types/crypto\";\nimport { MatrixEvent } from \"../models/event\";\nimport { CryptoBackend } from \"../common-crypto/CryptoBackend\";\n\n// import { logger } from \"../logger\";\n\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n */\nexport class RustCrypto implements CryptoBackend {\n    public globalBlacklistUnverifiedDevices = false;\n    public globalErrorOnUnknownDevices = false;\n\n    /** whether stop() has been called */\n    private stopped = false;\n\n    public constructor(private readonly olmMachine: RustSdkCryptoJs.OlmMachine, _userId: string, _deviceId: string) {}\n\n    public stop(): void {\n        // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n        // will cause an error.\n        if (this.stopped) {\n            return;\n        }\n        this.stopped = true;\n\n        // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n        // cleaned up; in particular, the indexeddb connections will be closed, which means they\n        // can then be deleted.\n        this.olmMachine.close();\n    }\n\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        await this.olmMachine.decryptRoomEvent(\"event\", new RustSdkCryptoJs.RoomId(\"room\"));\n        throw new Error(\"not implemented\");\n    }\n\n    public async userHasCrossSigningKeys(): Promise<boolean> {\n        // TODO\n        return false;\n    }\n\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        // TODO\n        return [];\n    }\n}\n"],"mappings":";;;;;;;;AAgBA;AAAoE;AAAA;AAhBpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACO,MAAMA,UAAU,CAA0B;EAI7C;;EAGOC,WAAW,CAAkBC,UAAsC,EAAEC,OAAe,EAAEC,SAAiB,EAAE;IAAA,KAA5EF,UAAsC,GAAtCA,UAAsC;IAAA,wEANhC,KAAK;IAAA,mEACV,KAAK;IAAA,+CAGxB,KAAK;EAE0F;EAE1GG,IAAI,GAAS;IAChB;IACA;IACA,IAAI,IAAI,CAACC,OAAO,EAAE;MACd;IACJ;IACA,IAAI,CAACA,OAAO,GAAG,IAAI;;IAEnB;IACA;IACA;IACA,IAAI,CAACJ,UAAU,CAACK,KAAK,EAAE;EAC3B;EAEA,MAAaC,YAAY,CAACC,KAAkB,EAAmC;IAC3E,MAAM,IAAI,CAACP,UAAU,CAACQ,gBAAgB,CAAC,OAAO,EAAE,IAAIC,eAAe,CAACC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnF,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC;EAEA,MAAaC,uBAAuB,GAAqB;IACrD;IACA,OAAO,KAAK;EAChB;EAEA,MAAaC,cAAc,GAAkC;IACzD;IACA,OAAO,EAAE;EACb;AACJ;AAAC"}