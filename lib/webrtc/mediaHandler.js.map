{"version":3,"file":"mediaHandler.js","names":["MediaHandlerEvent","MediaHandler","TypedEventEmitter","constructor","client","restoreMediaSettings","audioInput","videoInput","setAudioInput","deviceId","logger","info","updateLocalUsermediaStreams","setAudioSettings","opts","audioSettings","Object","assign","setVideoInput","setMediaInputs","log","userMediaStreams","length","callMediaStreamParams","Map","call","callEventHandler","calls","values","set","callId","audio","hasLocalUserMediaAudioTrack","video","hasLocalUserMediaVideoTrack","stream","id","track","getTracks","stop","localUserMediaStream","undefined","callHasEnded","has","get","getUserMediaStream","updateLocalUsermediaStream","groupCall","groupCallEventHandler","groupCalls","localCallFeed","groupCallId","type","GroupCallType","Video","state","GroupCallState","Ended","emit","LocalStreamsChanged","hasAudioDevice","devices","navigator","mediaDevices","enumerateDevices","filter","device","kind","hasVideoDevice","reusable","shouldRequestAudio","shouldRequestVideo","canReuseStream","getAudioTracks","getSettings","getVideoTracks","constraints","getUserMediaContraints","getUserMedia","settings","clone","removeTrack","push","stopUserMediaStream","mediaStream","index","indexOf","debug","splice","getScreensharingStream","screensharingStreams","screenshareConstraints","getScreenshareContraints","desktopCapturerSourceId","getDisplayMedia","matchingStream","stopScreensharingStream","stopAllStreams","isWebkit","webkitGetUserMedia","ideal","autoGainControl","echoCancellation","noiseSuppression","width","exact","height","mandatory","chromeMediaSource","chromeMediaSourceId"],"sources":["../../src/webrtc/mediaHandler.ts"],"sourcesContent":["/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 New Vector Ltd\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\nCopyright 2021 - 2022 Å imon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\nimport { GroupCallType, GroupCallState } from \"../webrtc/groupCall\";\nimport { logger } from \"../logger\";\nimport { MatrixClient } from \"../client\";\n\nexport enum MediaHandlerEvent {\n    LocalStreamsChanged = \"local_streams_changed\",\n}\n\nexport type MediaHandlerEventHandlerMap = {\n    [MediaHandlerEvent.LocalStreamsChanged]: () => void;\n};\n\nexport interface IScreensharingOpts {\n    desktopCapturerSourceId?: string;\n    audio?: boolean;\n    // For electron screen capture, there are very few options for detecting electron\n    // apart from inspecting the user agent or just trying getDisplayMedia() and\n    // catching the failure, so we do the latter - this flag tells the function to just\n    // throw an error so we can catch it in this case, rather than logging and emitting.\n    throwOnFail?: boolean;\n}\n\nexport interface AudioSettings {\n    autoGainControl: boolean;\n    echoCancellation: boolean;\n    noiseSuppression: boolean;\n}\n\nexport class MediaHandler extends TypedEventEmitter<\n    MediaHandlerEvent.LocalStreamsChanged,\n    MediaHandlerEventHandlerMap\n> {\n    private audioInput?: string;\n    private audioSettings?: AudioSettings;\n    private videoInput?: string;\n    private localUserMediaStream?: MediaStream;\n    public userMediaStreams: MediaStream[] = [];\n    public screensharingStreams: MediaStream[] = [];\n\n    public constructor(private client: MatrixClient) {\n        super();\n    }\n\n    public restoreMediaSettings(audioInput: string, videoInput: string): void {\n        this.audioInput = audioInput;\n        this.videoInput = videoInput;\n    }\n\n    /**\n     * Set an audio input device to use for MatrixCalls\n     * @param deviceId - the identifier for the device\n     * undefined treated as unset\n     */\n    public async setAudioInput(deviceId: string): Promise<void> {\n        logger.info(\"Setting audio input to\", deviceId);\n\n        if (this.audioInput === deviceId) return;\n\n        this.audioInput = deviceId;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /**\n     * Set audio settings for MatrixCalls\n     * @param opts - audio options to set\n     */\n    public async setAudioSettings(opts: AudioSettings): Promise<void> {\n        logger.info(\"Setting audio settings to\", opts);\n\n        this.audioSettings = Object.assign({}, opts) as AudioSettings;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /**\n     * Set a video input device to use for MatrixCalls\n     * @param deviceId - the identifier for the device\n     * undefined treated as unset\n     */\n    public async setVideoInput(deviceId: string): Promise<void> {\n        logger.info(\"Setting video input to\", deviceId);\n\n        if (this.videoInput === deviceId) return;\n\n        this.videoInput = deviceId;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /**\n     * Set media input devices to use for MatrixCalls\n     * @param audioInput - the identifier for the audio device\n     * @param videoInput - the identifier for the video device\n     * undefined treated as unset\n     */\n    public async setMediaInputs(audioInput: string, videoInput: string): Promise<void> {\n        logger.log(`mediaHandler setMediaInputs audioInput: ${audioInput} videoInput: ${videoInput}`);\n        this.audioInput = audioInput;\n        this.videoInput = videoInput;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /*\n     * Requests new usermedia streams and replace the old ones\n     */\n    public async updateLocalUsermediaStreams(): Promise<void> {\n        if (this.userMediaStreams.length === 0) return;\n\n        const callMediaStreamParams: Map<string, { audio: boolean; video: boolean }> = new Map();\n        for (const call of this.client.callEventHandler!.calls.values()) {\n            callMediaStreamParams.set(call.callId, {\n                audio: call.hasLocalUserMediaAudioTrack,\n                video: call.hasLocalUserMediaVideoTrack,\n            });\n        }\n\n        for (const stream of this.userMediaStreams) {\n            logger.log(`mediaHandler stopping all tracks for stream ${stream.id}`);\n            for (const track of stream.getTracks()) {\n                track.stop();\n            }\n        }\n\n        this.userMediaStreams = [];\n        this.localUserMediaStream = undefined;\n\n        for (const call of this.client.callEventHandler!.calls.values()) {\n            if (call.callHasEnded() || !callMediaStreamParams.has(call.callId)) {\n                continue;\n            }\n\n            const { audio, video } = callMediaStreamParams.get(call.callId)!;\n\n            logger.log(`mediaHandler updateLocalUsermediaStreams getUserMediaStream call ${call.callId}`);\n            const stream = await this.getUserMediaStream(audio, video);\n\n            if (call.callHasEnded()) {\n                continue;\n            }\n\n            await call.updateLocalUsermediaStream(stream);\n        }\n\n        for (const groupCall of this.client.groupCallEventHandler!.groupCalls.values()) {\n            if (!groupCall.localCallFeed) {\n                continue;\n            }\n\n            logger.log(\n                `mediaHandler updateLocalUsermediaStreams getUserMediaStream groupCall ${groupCall.groupCallId}`,\n            );\n            const stream = await this.getUserMediaStream(true, groupCall.type === GroupCallType.Video);\n\n            if (groupCall.state === GroupCallState.Ended) {\n                continue;\n            }\n\n            await groupCall.updateLocalUsermediaStream(stream);\n        }\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n    }\n\n    public async hasAudioDevice(): Promise<boolean> {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        return devices.filter((device) => device.kind === \"audioinput\").length > 0;\n    }\n\n    public async hasVideoDevice(): Promise<boolean> {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        return devices.filter((device) => device.kind === \"videoinput\").length > 0;\n    }\n\n    /**\n     * @param audio - should have an audio track\n     * @param video - should have a video track\n     * @param reusable - is allowed to be reused by the MediaHandler\n     * @returns based on passed parameters\n     */\n    public async getUserMediaStream(audio: boolean, video: boolean, reusable = true): Promise<MediaStream> {\n        const shouldRequestAudio = audio && (await this.hasAudioDevice());\n        const shouldRequestVideo = video && (await this.hasVideoDevice());\n\n        let stream: MediaStream;\n\n        let canReuseStream = true;\n        if (this.localUserMediaStream) {\n            // This code checks that the device ID is the same as the localUserMediaStream stream, but we update\n            // the localUserMediaStream whenever the device ID changes (apart from when restoring) so it's not\n            // clear why this would ever be different, unless there's a race.\n            if (shouldRequestAudio) {\n                if (\n                    this.localUserMediaStream.getAudioTracks().length === 0 ||\n                    this.localUserMediaStream.getAudioTracks()[0]?.getSettings()?.deviceId !== this.audioInput\n                ) {\n                    canReuseStream = false;\n                }\n            }\n            if (shouldRequestVideo) {\n                if (\n                    this.localUserMediaStream.getVideoTracks().length === 0 ||\n                    this.localUserMediaStream.getVideoTracks()[0]?.getSettings()?.deviceId !== this.videoInput\n                ) {\n                    canReuseStream = false;\n                }\n            }\n        } else {\n            canReuseStream = false;\n        }\n\n        if (!canReuseStream) {\n            const constraints = this.getUserMediaContraints(shouldRequestAudio, shouldRequestVideo);\n            stream = await navigator.mediaDevices.getUserMedia(constraints);\n            logger.log(\n                `mediaHandler getUserMediaStream streamId ${stream.id} shouldRequestAudio ${shouldRequestAudio} shouldRequestVideo ${shouldRequestVideo}`,\n                constraints,\n            );\n\n            for (const track of stream.getTracks()) {\n                const settings = track.getSettings();\n\n                if (track.kind === \"audio\") {\n                    this.audioInput = settings.deviceId!;\n                } else if (track.kind === \"video\") {\n                    this.videoInput = settings.deviceId!;\n                }\n            }\n\n            if (reusable) {\n                this.localUserMediaStream = stream;\n            }\n        } else {\n            stream = this.localUserMediaStream!.clone();\n            logger.log(\n                `mediaHandler clone userMediaStream ${this.localUserMediaStream?.id} new stream ${stream.id} shouldRequestAudio ${shouldRequestAudio} shouldRequestVideo ${shouldRequestVideo}`,\n            );\n\n            if (!shouldRequestAudio) {\n                for (const track of stream.getAudioTracks()) {\n                    stream.removeTrack(track);\n                }\n            }\n\n            if (!shouldRequestVideo) {\n                for (const track of stream.getVideoTracks()) {\n                    stream.removeTrack(track);\n                }\n            }\n        }\n\n        if (reusable) {\n            this.userMediaStreams.push(stream);\n        }\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n\n        return stream;\n    }\n\n    /**\n     * Stops all tracks on the provided usermedia stream\n     */\n    public stopUserMediaStream(mediaStream: MediaStream): void {\n        logger.log(`mediaHandler stopUserMediaStream stopping stream ${mediaStream.id}`);\n        for (const track of mediaStream.getTracks()) {\n            track.stop();\n        }\n\n        const index = this.userMediaStreams.indexOf(mediaStream);\n\n        if (index !== -1) {\n            logger.debug(\"Splicing usermedia stream out stream array\", mediaStream.id);\n            this.userMediaStreams.splice(index, 1);\n        }\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n\n        if (this.localUserMediaStream === mediaStream) {\n            this.localUserMediaStream = undefined;\n        }\n    }\n\n    /**\n     * @param desktopCapturerSourceId - sourceId for Electron DesktopCapturer\n     * @param reusable - is allowed to be reused by the MediaHandler\n     * @returns based on passed parameters\n     */\n    public async getScreensharingStream(opts: IScreensharingOpts = {}, reusable = true): Promise<MediaStream> {\n        let stream: MediaStream;\n\n        if (this.screensharingStreams.length === 0) {\n            const screenshareConstraints = this.getScreenshareContraints(opts);\n\n            if (opts.desktopCapturerSourceId) {\n                // We are using Electron\n                logger.debug(\"Getting screensharing stream using getUserMedia()\", opts);\n                stream = await navigator.mediaDevices.getUserMedia(screenshareConstraints);\n            } else {\n                // We are not using Electron\n                logger.debug(\"Getting screensharing stream using getDisplayMedia()\", opts);\n                stream = await navigator.mediaDevices.getDisplayMedia(screenshareConstraints);\n            }\n        } else {\n            const matchingStream = this.screensharingStreams[this.screensharingStreams.length - 1];\n            logger.log(\"Cloning screensharing stream\", matchingStream.id);\n            stream = matchingStream.clone();\n        }\n\n        if (reusable) {\n            this.screensharingStreams.push(stream);\n        }\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n\n        return stream;\n    }\n\n    /**\n     * Stops all tracks on the provided screensharing stream\n     */\n    public stopScreensharingStream(mediaStream: MediaStream): void {\n        logger.debug(\"Stopping screensharing stream\", mediaStream.id);\n        for (const track of mediaStream.getTracks()) {\n            track.stop();\n        }\n\n        const index = this.screensharingStreams.indexOf(mediaStream);\n\n        if (index !== -1) {\n            logger.debug(\"Splicing screensharing stream out stream array\", mediaStream.id);\n            this.screensharingStreams.splice(index, 1);\n        }\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n    }\n\n    /**\n     * Stops all local media tracks\n     */\n    public stopAllStreams(): void {\n        for (const stream of this.userMediaStreams) {\n            logger.log(`mediaHandler stopAllStreams stopping stream ${stream.id}`);\n            for (const track of stream.getTracks()) {\n                track.stop();\n            }\n        }\n\n        for (const stream of this.screensharingStreams) {\n            for (const track of stream.getTracks()) {\n                track.stop();\n            }\n        }\n\n        this.userMediaStreams = [];\n        this.screensharingStreams = [];\n        this.localUserMediaStream = undefined;\n\n        this.emit(MediaHandlerEvent.LocalStreamsChanged);\n    }\n\n    private getUserMediaContraints(audio: boolean, video: boolean): MediaStreamConstraints {\n        const isWebkit = !!navigator.webkitGetUserMedia;\n\n        return {\n            audio: audio\n                ? {\n                      deviceId: this.audioInput ? { ideal: this.audioInput } : undefined,\n                      autoGainControl: this.audioSettings ? { ideal: this.audioSettings.autoGainControl } : undefined,\n                      echoCancellation: this.audioSettings ? { ideal: this.audioSettings.echoCancellation } : undefined,\n                      noiseSuppression: this.audioSettings ? { ideal: this.audioSettings.noiseSuppression } : undefined,\n                  }\n                : false,\n            video: video\n                ? {\n                      deviceId: this.videoInput ? { ideal: this.videoInput } : undefined,\n                      /* We want 640x360.  Chrome will give it only if we ask exactly,\n                   FF refuses entirely if we ask exactly, so have to ask for ideal\n                   instead\n                   XXX: Is this still true?\n                 */\n                      width: isWebkit ? { exact: 640 } : { ideal: 640 },\n                      height: isWebkit ? { exact: 360 } : { ideal: 360 },\n                  }\n                : false,\n        };\n    }\n\n    private getScreenshareContraints(opts: IScreensharingOpts): DesktopCapturerConstraints {\n        const { desktopCapturerSourceId, audio } = opts;\n        if (desktopCapturerSourceId) {\n            logger.debug(\"Using desktop capturer source\", desktopCapturerSourceId);\n            return {\n                audio: audio ?? false,\n                video: {\n                    mandatory: {\n                        chromeMediaSource: \"desktop\",\n                        chromeMediaSourceId: desktopCapturerSourceId,\n                    },\n                },\n            };\n        } else {\n            logger.debug(\"Not using desktop capturer source\");\n            return {\n                audio: audio ?? false,\n                video: true,\n            };\n        }\n    }\n}\n"],"mappings":"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"}