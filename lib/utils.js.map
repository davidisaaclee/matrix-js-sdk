{"version":3,"file":"utils.js","names":["interns","Map","internaliseString","str","String","toString","has","set","get","encodeParams","params","searchParams","URLSearchParams","key","val","Object","entries","undefined","decodeParams","query","o","keys","getAll","length","encodeUri","pathTemplate","variables","hasOwnProperty","replace","encodeURIComponent","removeElement","array","fn","reverse","i","splice","isFunction","value","prototype","call","checkObjectHasKeys","obj","Error","deepCopy","JSON","parse","stringify","deepCompare","x","y","isNaN","constructor","RegExp","Date","Array","p","deepSortedObjectEntries","isArray","pairs","k","v","push","sort","a","b","lexicographicCompare","isNumber","isFinite","removeHiddenChars","unhomoglyph","normalize","removeHiddenCharsRegex","removeDirectionOverrideChars","toLowerCase","escapeRegExp","string","globToRegexp","glob","extended","replacements","_match","neg","pat","join","reduce","args","ensureNoTrailingSlash","url","endsWith","slice","sleep","ms","Promise","resolve","setTimeout","isNullOrUndefined","defer","reject","promise","_resolve","_reject","promiseMapSeries","promises","promiseTry","chunkPromises","fns","chunkSize","results","all","map","simpleRetryOperation","promiseFn","promiseRetry","attempt","forever","factor","minTimeout","maxTimeout","crypto","setCrypto","c","getCrypto","DEFAULT_ALPHABET","fromCharCode","alphabetPad","s","n","alphabet","padEnd","baseToString","len","BigInt","Number","d","r","Math","abs","stringToBase","result","j","charIndex","charCodeAt","averageBetweenStrings","padN","max","baseA","baseB","avg","nextString","prevString","collator","Intl","Collator","compare","recursivelyAssign","target","source","ignoreNullish","sourceKey","sourceValue","getContentTimestampWithFallback","event","M_TIMESTAMP","findIn","getContent","sortEventsByLatestContentTimestamp","left","right","getPrivateReadReceiptField","client","doesServerSupportUnstableFeature","ReceiptType","ReadPrivate","UnstableReadPrivate","isSupportedReceiptType","receiptType","Read","includes"],"sources":["../src/utils.ts"],"sourcesContent":["/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module.\n * @module utils\n */\n\nimport unhomoglyph from \"unhomoglyph\";\nimport promiseRetry from \"p-retry\";\n\nimport type * as NodeCrypto from \"crypto\";\nimport { MatrixClient, MatrixEvent } from \".\";\nimport { M_TIMESTAMP } from \"./@types/location\";\nimport { ReceiptType } from \"./@types/read_receipts\";\n\nconst interns = new Map<string, string>();\n\n/**\n * Internalises a string, reusing a known pointer or storing the pointer\n * if needed for future strings.\n * @param str The string to internalise.\n * @returns The internalised string.\n */\nexport function internaliseString(str: string): string {\n    // Unwrap strings before entering the map, if we somehow got a wrapped\n    // string as our input. This should only happen from tests.\n    if ((str as unknown) instanceof String) {\n        str = str.toString();\n    }\n\n    // Check the map to see if we can store the value\n    if (!interns.has(str)) {\n        interns.set(str, str);\n    }\n\n    // Return any cached string reference\n    return interns.get(str);\n}\n\n/**\n * Encode a dictionary of query parameters.\n * Omits any undefined/null values.\n * @param {Object} params A dict of key/values to encode e.g.\n * {\"foo\": \"bar\", \"baz\": \"taz\"}\n * @return {string} The encoded string e.g. foo=bar&baz=taz\n */\nexport function encodeParams(params: Record<string, string | number | boolean>): string {\n    const searchParams = new URLSearchParams();\n    for (const [key, val] of Object.entries(params)) {\n        if (val !== undefined && val !== null) {\n            searchParams.set(key, String(val));\n        }\n    }\n    return searchParams.toString();\n}\n\nexport type QueryDict = Record<string, string | string[]>;\n\n/**\n * Decode a query string in `application/x-www-form-urlencoded` format.\n * @param {string} query A query string to decode e.g.\n * foo=bar&via=server1&server2\n * @return {Object} The decoded object, if any keys occurred multiple times\n * then the value will be an array of strings, else it will be an array.\n * This behaviour matches Node's qs.parse but is built on URLSearchParams\n * for native web compatibility\n */\nexport function decodeParams(query: string): QueryDict {\n    const o: QueryDict = {};\n    const params = new URLSearchParams(query);\n    for (const key of params.keys()) {\n        const val = params.getAll(key);\n        o[key] = val.length === 1 ? val[0] : val;\n    }\n    return o;\n}\n\n/**\n * Encodes a URI according to a set of template variables. Variables will be\n * passed through encodeURIComponent.\n * @param {string} pathTemplate The path with template variables e.g. '/foo/$bar'.\n * @param {Object} variables The key/value pairs to replace the template\n * variables with. E.g. { \"$bar\": \"baz\" }.\n * @return {string} The result of replacing all template variables e.g. '/foo/baz'.\n */\nexport function encodeUri(pathTemplate: string, variables: Record<string, string>): string {\n    for (const key in variables) {\n        if (!variables.hasOwnProperty(key)) {\n            continue;\n        }\n        pathTemplate = pathTemplate.replace(\n            key, encodeURIComponent(variables[key]),\n        );\n    }\n    return pathTemplate;\n}\n\n/**\n * The removeElement() method removes the first element in the array that\n * satisfies (returns true) the provided testing function.\n * @param {Array} array The array.\n * @param {Function} fn Function to execute on each value in the array, with the\n * function signature <code>fn(element, index, array)</code>. Return true to\n * remove this element and break.\n * @param {boolean} reverse True to search in reverse order.\n * @return {boolean} True if an element was removed.\n */\nexport function removeElement<T>(\n    array: T[],\n    fn: (t: T, i?: number, a?: T[]) => boolean,\n    reverse?: boolean,\n): boolean {\n    let i: number;\n    if (reverse) {\n        for (i = array.length - 1; i >= 0; i--) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    } else {\n        for (i = 0; i < array.length; i++) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Checks if the given thing is a function.\n * @param {*} value The thing to check.\n * @return {boolean} True if it is a function.\n */\nexport function isFunction(value: any) {\n    return Object.prototype.toString.call(value) === \"[object Function]\";\n}\n\n/**\n * Checks that the given object has the specified keys.\n * @param {Object} obj The object to check.\n * @param {string[]} keys The list of keys that 'obj' must have.\n * @throws If the object is missing keys.\n */\n// note using 'keys' here would shadow the 'keys' function defined above\nexport function checkObjectHasKeys(obj: object, keys: string[]) {\n    for (let i = 0; i < keys.length; i++) {\n        if (!obj.hasOwnProperty(keys[i])) {\n            throw new Error(\"Missing required key: \" + keys[i]);\n        }\n    }\n}\n\n/**\n * Deep copy the given object. The object MUST NOT have circular references and\n * MUST NOT have functions.\n * @param {Object} obj The object to deep copy.\n * @return {Object} A copy of the object without any references to the original.\n */\nexport function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Compare two objects for equality. The objects MUST NOT have circular references.\n *\n * @param {Object} x The first object to compare.\n * @param {Object} y The second object to compare.\n *\n * @return {boolean} true if the two objects are equal\n */\nexport function deepCompare(x: any, y: any): boolean {\n    // Inspired by\n    // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249\n\n    // Compare primitives and functions.\n    // Also check if both arguments link to the same object.\n    if (x === y) {\n        return true;\n    }\n\n    if (typeof x !== typeof y) {\n        return false;\n    }\n\n    // special-case NaN (since NaN !== NaN)\n    if (typeof x === 'number' && isNaN(x) && isNaN(y)) {\n        return true;\n    }\n\n    // special-case null (since typeof null == 'object', but null.constructor\n    // throws)\n    if (x === null || y === null) {\n        return x === y;\n    }\n\n    // everything else is either an unequal primitive, or an object\n    if (!(x instanceof Object)) {\n        return false;\n    }\n\n    // check they are the same type of object\n    if (x.constructor !== y.constructor || x.prototype !== y.prototype) {\n        return false;\n    }\n\n    // special-casing for some special types of object\n    if (x instanceof RegExp || x instanceof Date) {\n        return x.toString() === y.toString();\n    }\n\n    // the object algorithm works for Array, but it's sub-optimal.\n    if (x instanceof Array) {\n        if (x.length !== y.length) {\n            return false;\n        }\n\n        for (let i = 0; i < x.length; i++) {\n            if (!deepCompare(x[i], y[i])) {\n                return false;\n            }\n        }\n    } else {\n        // check that all of y's direct keys are in x\n        for (const p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n        }\n\n        // finally, compare each of x's keys with y\n        for (const p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p) || !deepCompare(x[p], y[p])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n// Dev note: This returns an array of tuples, but jsdoc doesn't like that. https://github.com/jsdoc/jsdoc/issues/1703\n/**\n * Creates an array of object properties/values (entries) then\n * sorts the result by key, recursively. The input object must\n * ensure it does not have loops. If the input is not an object\n * then it will be returned as-is.\n * @param {*} obj The object to get entries of\n * @returns {Array} The entries, sorted by key.\n */\nexport function deepSortedObjectEntries(obj: any): [string, any][] {\n    if (typeof(obj) !== \"object\") return obj;\n\n    // Apparently these are object types...\n    if (obj === null || obj === undefined || Array.isArray(obj)) return obj;\n\n    const pairs: [string, any][] = [];\n    for (const [k, v] of Object.entries(obj)) {\n        pairs.push([k, deepSortedObjectEntries(v)]);\n    }\n\n    // lexicographicCompare is faster than localeCompare, so let's use that.\n    pairs.sort((a, b) => lexicographicCompare(a[0], b[0]));\n\n    return pairs;\n}\n\n/**\n * Returns whether the given value is a finite number without type-coercion\n *\n * @param {*} value the value to test\n * @return {boolean} whether or not value is a finite number without type-coercion\n */\nexport function isNumber(value: any): boolean {\n    return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Removes zero width chars, diacritics and whitespace from the string\n * Also applies an unhomoglyph on the string, to prevent similar looking chars\n * @param {string} str the string to remove hidden characters from\n * @return {string} a string with the hidden characters removed\n */\nexport function removeHiddenChars(str: string): string {\n    if (typeof str === \"string\") {\n        return unhomoglyph(str.normalize('NFD').replace(removeHiddenCharsRegex, ''));\n    }\n    return \"\";\n}\n\n/**\n * Removes the direction override characters from a string\n * @param {string} input\n * @returns string with chars removed\n */\nexport function removeDirectionOverrideChars(str: string): string {\n    if (typeof str === \"string\") {\n        return str.replace(/[\\u202d-\\u202e]/g, '');\n    }\n    return \"\";\n}\n\nexport function normalize(str: string): string {\n    // Note: we have to match the filter with the removeHiddenChars() because the\n    // function strips spaces and other characters (M becomes RN for example, in lowercase).\n    return removeHiddenChars(str.toLowerCase())\n        // Strip all punctuation\n        .replace(/[\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~\\u2000-\\u206f\\u2e00-\\u2e7f]/g, \"\")\n        // We also doubly convert to lowercase to work around oddities of the library.\n        .toLowerCase();\n}\n\n// Regex matching bunch of unicode control characters and otherwise misleading/invisible characters.\n// Includes:\n// various width spaces U+2000 - U+200D\n// LTR and RTL marks U+200E and U+200F\n// LTR/RTL and other directional formatting marks U+202A - U+202F\n// Arabic Letter RTL mark U+061C\n// Combining characters U+0300 - U+036F\n// Zero width no-break space (BOM) U+FEFF\n// eslint-disable-next-line no-misleading-character-class\nconst removeHiddenCharsRegex = /[\\u2000-\\u200F\\u202A-\\u202F\\u0300-\\u036F\\uFEFF\\u061C\\s]/g;\n\nexport function escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nexport function globToRegexp(glob: string, extended?: any): string {\n    // From\n    // https://github.com/matrix-org/synapse/blob/abbee6b29be80a77e05730707602f3bbfc3f38cb/synapse/push/__init__.py#L132\n    // Because micromatch is about 130KB with dependencies,\n    // and minimatch is not much better.\n    const replacements: ([RegExp, string | ((substring: string, ...args: any[]) => string) ])[] = [\n        [/\\\\\\*/g, '.*'],\n        [/\\?/g, '.'],\n        extended !== false && [\n            /\\\\\\[(!|)(.*)\\\\]/g,\n            (_match: string, neg: string, pat: string) => [\n                '[',\n                neg ? '^' : '',\n                pat.replace(/\\\\-/, '-'),\n                ']',\n            ].join(''),\n        ],\n    ];\n    return replacements.reduce(\n        // https://github.com/microsoft/TypeScript/issues/30134\n        (pat, args) => args ? pat.replace(args[0], args[1] as any) : pat,\n        escapeRegExp(glob),\n    );\n}\n\nexport function ensureNoTrailingSlash(url: string): string {\n    if (url && url.endsWith(\"/\")) {\n        return url.slice(0, -1);\n    } else {\n        return url;\n    }\n}\n\n// Returns a promise which resolves with a given value after the given number of ms\nexport function sleep<T>(ms: number, value?: T): Promise<T> {\n    return new Promise((resolve => {\n        setTimeout(resolve, ms, value);\n    }));\n}\n\nexport function isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n}\n\nexport interface IDeferred<T> {\n    resolve: (value: T | Promise<T>) => void;\n    reject: (reason?: any) => void;\n    promise: Promise<T>;\n}\n\n// Returns a Deferred\nexport function defer<T = void>(): IDeferred<T> {\n    let resolve;\n    let reject;\n\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    return { resolve, reject, promise };\n}\n\nexport async function promiseMapSeries<T>(\n    promises: Array<T | Promise<T>>,\n    fn: (t: T) => Promise<unknown> | void, // if async/promise we don't care about the type as we only await resolution\n): Promise<void> {\n    for (const o of promises) {\n        await fn(await o);\n    }\n}\n\nexport function promiseTry<T>(fn: () => T | Promise<T>): Promise<T> {\n    return Promise.resolve(fn());\n}\n\n// Creates and awaits all promises, running no more than `chunkSize` at the same time\nexport async function chunkPromises<T>(fns: (() => Promise<T>)[], chunkSize: number): Promise<T[]> {\n    const results: T[] = [];\n    for (let i = 0; i < fns.length; i += chunkSize) {\n        results.push(...(await Promise.all(fns.slice(i, i + chunkSize).map(fn => fn()))));\n    }\n    return results;\n}\n\n/**\n * Retries the function until it succeeds or is interrupted. The given function must return\n * a promise which throws/rejects on error, otherwise the retry will assume the request\n * succeeded. The promise chain returned will contain the successful promise. The given function\n * should always return a new promise.\n * @param {Function} promiseFn The function to call to get a fresh promise instance. Takes an\n * attempt count as an argument, for logging/debugging purposes.\n * @returns {Promise<T>} The promise for the retried operation.\n */\nexport function simpleRetryOperation<T>(promiseFn: (attempt: number) => Promise<T>): Promise<T> {\n    return promiseRetry((attempt: number) => {\n        return promiseFn(attempt);\n    }, {\n        forever: true,\n        factor: 2,\n        minTimeout: 3000, // ms\n        maxTimeout: 15000, // ms\n    });\n}\n\n// We need to be able to access the Node.js crypto library from within the\n// Matrix SDK without needing to `require(\"crypto\")`, which will fail in\n// browsers.  So `index.ts` will call `setCrypto` to store it, and when we need\n// it, we can call `getCrypto`.\nlet crypto: typeof NodeCrypto;\n\nexport function setCrypto(c: typeof NodeCrypto) {\n    crypto = c;\n}\n\nexport function getCrypto(): typeof NodeCrypto {\n    return crypto;\n}\n\n// String averaging inspired by https://stackoverflow.com/a/2510816\n// Dev note: We make the alphabet a string because it's easier to write syntactically\n// than arrays. Thankfully, strings implement the useful parts of the Array interface\n// anyhow.\n\n/**\n * The default alphabet used by string averaging in this SDK. This matches\n * all usefully printable ASCII characters (0x20-0x7E, inclusive).\n */\nexport const DEFAULT_ALPHABET = (() => {\n    let str = \"\";\n    for (let c = 0x20; c <= 0x7E; c++) {\n        str += String.fromCharCode(c);\n    }\n    return str;\n})();\n\n/**\n * Pads a string using the given alphabet as a base. The returned string will be\n * padded at the end with the first character in the alphabet.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to pad.\n * @param {number} n The length to pad to.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The padded string.\n */\nexport function alphabetPad(s: string, n: number, alphabet = DEFAULT_ALPHABET): string {\n    return s.padEnd(n, alphabet[0]);\n}\n\n/**\n * Converts a baseN number to a string, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {bigint} n The baseN number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The baseN number encoded as a string from the alphabet.\n */\nexport function baseToString(n: bigint, alphabet = DEFAULT_ALPHABET): string {\n    // Developer note: the stringToBase() function offsets the character set by 1 so that repeated\n    // characters (ie: \"aaaaaa\" in a..z) don't come out as zero. We have to reverse this here as\n    // otherwise we'll be wrong in our conversion. Undoing a +1 before an exponent isn't very fun\n    // though, so we rely on a lengthy amount of `x - 1` and integer division rules to reach a\n    // sane state. This also means we have to do rollover detection: see below.\n\n    const len = BigInt(alphabet.length);\n    if (n <= len) {\n        return alphabet[Number(n) - 1] ?? \"\";\n    }\n\n    let d = n / len;\n    let r = Number(n % len) - 1;\n\n    // Rollover detection: if the remainder is negative, it means that the string needs\n    // to roll over by 1 character downwards (ie: in a..z, the previous to \"aaa\" would be\n    // \"zz\").\n    if (r < 0) {\n        d -= BigInt(Math.abs(r)); // abs() is just to be clear what we're doing. Could also `+= r`.\n        r = Number(len) - 1;\n    }\n\n    return baseToString(d, alphabet) + alphabet[r];\n}\n\n/**\n * Converts a string to a baseN number, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to convert to a number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {bigint} The baseN number.\n */\nexport function stringToBase(s: string, alphabet = DEFAULT_ALPHABET): bigint {\n    const len = BigInt(alphabet.length);\n\n    // In our conversion to baseN we do a couple performance optimizations to avoid using\n    // excess CPU and such. To create baseN numbers, the input string needs to be reversed\n    // so the exponents stack up appropriately, as the last character in the unreversed\n    // string has less impact than the first character (in \"abc\" the A is a lot more important\n    // for lexicographic sorts). We also do a trick with the character codes to optimize the\n    // alphabet lookup, avoiding an index scan of `alphabet.indexOf(reversedStr[i])` - we know\n    // that the alphabet and (theoretically) the input string are constrained on character sets\n    // and thus can do simple subtraction to end up with the same result.\n\n    // Developer caution: we carefully cast to BigInt here to avoid losing precision. We cannot\n    // rely on Math.pow() (for example) to be capable of handling our insane numbers.\n\n    let result = BigInt(0);\n    for (let i = s.length - 1, j = BigInt(0); i >= 0; i--, j++) {\n        const charIndex = s.charCodeAt(i) - alphabet.charCodeAt(0);\n\n        // We add 1 to the char index to offset the whole numbering scheme. We unpack this in\n        // the baseToString() function.\n        result += BigInt(1 + charIndex) * (len ** j);\n    }\n    return result;\n}\n\n/**\n * Averages two strings, returning the midpoint between them. This is accomplished by\n * converting both to baseN numbers (where N is the alphabet's length) then averaging\n * those before re-encoding as a string.\n * @param {string} a The first string.\n * @param {string} b The second string.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The midpoint between the strings, as a string.\n */\nexport function averageBetweenStrings(a: string, b: string, alphabet = DEFAULT_ALPHABET): string {\n    const padN = Math.max(a.length, b.length);\n    const baseA = stringToBase(alphabetPad(a, padN, alphabet), alphabet);\n    const baseB = stringToBase(alphabetPad(b, padN, alphabet), alphabet);\n    const avg = (baseA + baseB) / BigInt(2);\n\n    // Detect integer division conflicts. This happens when two numbers are divided too close so\n    // we lose a .5 precision. We need to add a padding character in these cases.\n    if (avg === baseA || avg == baseB) {\n        return baseToString(avg, alphabet) + alphabet[0];\n    }\n\n    return baseToString(avg, alphabet);\n}\n\n/**\n * Finds the next string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then adding 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which follows the input string.\n */\nexport function nextString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) + BigInt(1), alphabet);\n}\n\n/**\n * Finds the previous string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then subtracting 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which precedes the input string.\n */\nexport function prevString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) - BigInt(1), alphabet);\n}\n\n/**\n * Compares strings lexicographically as a sort-safe function.\n * @param {string} a The first (reference) string.\n * @param {string} b The second (compare) string.\n * @returns {number} Negative if the reference string is before the compare string;\n * positive if the reference string is after; and zero if equal.\n */\nexport function lexicographicCompare(a: string, b: string): number {\n    // Dev note: this exists because I'm sad that you can use math operators on strings, so I've\n    // hidden the operation in this function.\n    if (a < b) {\n        return -1;\n    } else if (a > b) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nconst collator = new Intl.Collator();\n/**\n * Performant language-sensitive string comparison\n * @param a the first string to compare\n * @param b the second string to compare\n */\nexport function compare(a: string, b: string): number {\n    return collator.compare(a, b);\n}\n\n/**\n * This function is similar to Object.assign() but it assigns recursively and\n * allows you to ignore nullish values from the source\n *\n * @param {Object} target\n * @param {Object} source\n * @returns the target object\n */\nexport function recursivelyAssign(target: Object, source: Object, ignoreNullish = false): any {\n    for (const [sourceKey, sourceValue] of Object.entries(source)) {\n        if (target[sourceKey] instanceof Object && sourceValue) {\n            recursivelyAssign(target[sourceKey], sourceValue);\n            continue;\n        }\n        if ((sourceValue !== null && sourceValue !== undefined) || !ignoreNullish) {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n    }\n    return target;\n}\n\nfunction getContentTimestampWithFallback(event: MatrixEvent): number {\n    return M_TIMESTAMP.findIn<number>(event.getContent()) ?? -1;\n}\n\n/**\n * Sort events by their content m.ts property\n * Latest timestamp first\n */\nexport function sortEventsByLatestContentTimestamp(left: MatrixEvent, right: MatrixEvent): number {\n    return getContentTimestampWithFallback(right) - getContentTimestampWithFallback(left);\n}\n\nexport async function getPrivateReadReceiptField(client: MatrixClient): Promise<ReceiptType | null> {\n    if (await client.doesServerSupportUnstableFeature(\"org.matrix.msc2285.stable\")) return ReceiptType.ReadPrivate;\n    if (await client.doesServerSupportUnstableFeature(\"org.matrix.msc2285\")) return ReceiptType.UnstableReadPrivate;\n    return null;\n}\n\nexport function isSupportedReceiptType(receiptType: string): boolean {\n    return [\n        ReceiptType.Read,\n        ReceiptType.ReadPrivate,\n        ReceiptType.UnstableReadPrivate,\n    ].includes(receiptType as ReceiptType);\n}\n\n"],"mappings":"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"}